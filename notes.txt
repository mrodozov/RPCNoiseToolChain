 Separate responsibilities between different classes (objects) like :
  
- Basic requirements manager (RequrementsManager)
  takes care of initial system requirements as setting env vars 
  and checking tunnels 
  
- A run number manager (RunlistManager.py) 
  takes care of runlists to be collected, and waits until the execution is finished to update the runlist
  Also it may take care of new data availability, to subscribe to the runregistry
  and wait for events such as new available runs. Needs refactoring and debug as the
  the run check subroutine causes deadlock  (bad exception handling). Runlist synch also needs improvement
  
- Execution manager (RunProcessManager)

  Spawns a job per run and puts the job on multiprocess queue. Delegates run options
  to the execution function that it uses to put on the queue. When the run is finished
  removes it's number from the process queue and puts it on the processed queue.
  The only job it handles is to manage the process pool and to stop it. Executes on it's
  own thread, terminates and joins the main thread if condition var to stop is met.

- Chain and CommandClasses

  CommandClasses or Commands represent each independent subroutine that can
  be part of the analysis. One Command object is a specific task that is executed for
  given run if the requirements for the task (dependencies) are fulfilled.
  The Chain governs tasks execution order and requirements checks
  using dependency dictionaries (configs). The Chain uses a queue of tasks and a messenger
  system (Event & EventHandler) to start new tasks, each of which on separate thread.
  Events and EventHandler need refactoring, Chain needs extension to allow
  single task to start when list of tasks are finished (now multiple task may start on
  single task finish but every task depends on only one to start )

- DBService
  Singleton object to handle all db requests. SQLAlchemy is used underneath
  to provide MySQL Oracle and sqlite support (all of those can be used) and
  to handle concurrent queries as handy db interface

- RRService
  Handles run registry queries using the latest run and current options as input

- SSHService
  Singleton object to serve as interface for network transactions. When transaction
  is needed by a subroutine, it handles the request and returns finish status.
  Paramiko is used underneath and it may use key or pass auth. Currently not properly
  used and only serves credentials as the RunProcess mngr is based on multiprocess pool
  and separate process cannot use shared ssh connection from another process. Works
  fine when ThreadPool is used but the ThreadPool causes memory leak with unknown origin (so far)
  Even deleting the resources allocated by the thread did not solved that, which may
  show the leak originates in the ThreadPool implementation (ThreadPool is not official module)
  
- Report manager (ReportService)
  Takes care of collecting error or success outputs, update the logs and send email
  notifications. Maybe method to create short reports from the log files


- Get the runregistry API to work from outside CERN

  1. Modify the RRApi class like this:
  1.1 import socks (pip install PySocks if the module not available)
  1.2 Change urllib -> urllib2 in rrapi.py (everywhere, uses with the import)
  1.3 Add third argument for RRApi class constructor and another member variable:
      def __init__(self, url, debug = False, use_proxy = False)
          self.use_proxy = use_proxy
        ....
  1.4 Add this:
      if self.use_proxy: socks.wrapmodule(urllib2)
      right before this:
      resp = urllib2.urlopen(callurl, sdata)
      in the get() method of RRApi class
  2. Setup socks proxy to lxplus like this:
      ssh -f -D 1080 -N lxplus.cern.ch -l yourusername
  3. Setup the default proxy settings in the python program
      socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, '127.0.0.1', 1080)
    and when creating new RRApi object, just set the third argument in the constructor to 'True'
      rr_api = RRApi(URL, debug = True, use_proxy = True)
  ---------------------
  Enjoy your RR queries
